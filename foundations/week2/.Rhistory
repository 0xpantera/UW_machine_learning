mutate(more_boys = boys > girls)
ggplot(data=present, aes(x = year, y = more_boys)) +
geom_line()
ggplot(data=present, aes(x = more_boys, y = year)) +
geom_line()
present <- present %>%
mutate(prop_boy_girl = boys / girls)
present <- present %>%
mutate(prop_boy_girl = girls / boys)
ggplot(data=present, aes(x = year, y = prop_boy_girl)) +
geom_point()
present %>%
mutate(total = boys + girls) %>%
arrange(desc(total))
View(present)
library(dplyr)
library(ggplot2)
library(statsr)
View(arbuthnot)
View(arbuthnot)
library(dplyr)
library(ggplot2)
library(statsr)
data(arbuthnot)
write.csv(data=arbuthnot, file = "arbuthnot.csv")
?write.csv
write.csv(arbuthnot, file="arbuthnot.csv")
wd()
pwd
pwd()
data(present)
write.csv(present, file="present.csv")
View(arbuthnot)
mutate(prop_boys = year / boys)
arbuthnot <- arbuthnot %>%
mutate(prop_boys = year / boys)
View(arbuthnot)
geom_point()
arbuthnot <- arbuthnot %>%
mutate(prop_boys = boys / total)
ggplot(data = arbuthnot, aes(x = year, y = prop_boys)) +
geom_line() +
geom_point()
View(arbuthnot)
arbuthnot <- arbuthnot %>%
mutate(prop_boys = boys / total)
mutate(total = boys + girls)
arbuthnot <- arbuthnot %>%
mutate(total = boys + girls)
arbuthnot <- arbuthnot %>%
mutate(prop_boys = boys / total)
library(statsr)
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
View(nycflights)
names(nycflights)
?nycflights
str(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
rdu_flights <- nycflights %>%
filter(dest == "RDU")
ggplot(data = rdu_flights, aes(x = dep_delay)) +
geom_histogram()
View(rdu_flights)
rdu_flights %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
sfo_feb_flights <- nycflights %>%
filter(dest == "SFO", month == 2)
sfo_feb_flights %>% summarise(n = n())
ggplot(data = sfo_feb_flights, aes(x = arr_delay)) +
geom_histogram()
sfo_feb_flights %>%
summarise(mean_arr_del = mean(arr_delay), std_arr_del = sd(arr_delay), iqr_arr_del = IQR(arr_delay))
rdu_flights %>%
group_by(origin) %>%
summarise(mean_dd = mean(dep_delay), sd_dd = sd(dep_delay), n = n())
View(sfo_feb_flights)
sfo_feb_flights %>%
group_by(carrier) %>%
summarise(med_arr_del = median(arr_delay), iqr_arr_del = IQR(arr_delay))
View(nycflights)
nycflights %>%
group_by(month) %>%
summarise(mean_dd = mean(dep_delay)) %>%
arrange(desc(mean_dd))
nycflights %>%
group_by(month) %>%
summarise(med_dep_del = median(dep_delay)) %>%
arrange(desc(med_dep_del))
ggplot(nycflights, aes(x = factor(month), y = dep_delay)) +
geom_boxplot()
nycflights <- nycflights %>%
mutate(dep_type = ifelse(dep_delay < 5, "on time", "delayed"))
nycflights %>%
group_by(origin) %>%
summarise(ot_dep_rate = sum(dep_type == "on time") / n()) %>%
arrange(desc(ot_dep_rate))
ggplot(data = nycflights, aes(x = origin, fill = dep_type)) +
geom_bar()
nycflights <- nycflights %>%
mutate(avg_speed = (distance / (air_time/60))
View(nycflights)
nycflights <- nycflights %>%
mutate(avg_speed = distance/(air_time/60))
View(nycflights)
?arrange
nycflights %>%
group_by(tailnum) %>%
arrange(avg_speed)
nycflights %>%
group_by(tailnum) %>%
arrange(avg_speed) %>%
select(avg_speed, tailnum)
nycflights %>%
group_by(tailnum) %>%
arrange(desc(avg_speed)) %>%
select(avg_speed, tailnum)
ggplot(data = nycflights, aes(x = avg_speed, y = distance))
ggplot(data = nycflights, aes(x = avg_speed, y = distance)) +
geom_point()
ggplot(data = nycflights, aes(x = distance, y = avg_speed)) +
geom_point()
nycflights <- nycflights %>%
mutate(arr_type = ifelse(arr_delay <= 0, "on time", "delayed"))
View(nycflights)
nycflights %>%
group_by(dep_type) %>%
summarise(ot_arr_rate = sum(arr_type == "on time") / n())
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
data(nycflights)
library(statsr)
library(dplyr)
library(ggplot2)
data(nycflights)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram()
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 15)
ggplot(data = nycflights, aes(x = dep_delay)) +
geom_histogram(binwidth = 150)
library(statsr)
library(statsr)
library(dplyr)
library(ggplot2)
data(kobe_basket)
names(kobe_basket)
View(kobe_basket)
kobe_streak <- calc_streak(kobe_basket$shot)
View(kobe_streak)
geom_histogram(binwidth = 1)
ggplot(data = kobe_streak, aes(x = length)) +
geom_histogram(binwidth = 1)
median(kobe_streak$length)
IQR(kobe_streak$length)
coin_outcomes <- c("heads", "tails")
sample(coin_outcomes, size = 1, replace = TRUE)
```
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
sample(coin_outcomes, size = 1, replace = TRUE)
sim_fair_coin <- sample(coin_outcomes, size = 100, replace = TRUE)
sim_fair_coin
table(sim_fair_coin)
sim_unfair_coin <- sample(coin_outcomes, size = 100, replace = TRUE,
prob = c(0.2, 0.8))
table(sim_unfair_coin)
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 1, replace = TRUE)
table(sim_basket)
shot_outcomes <- c("H", "M")
sim_basket <- sample(shot_outcomes, size = 1, replace = TRUE)
sample(shot_outcomes, size=100, replace=TRUE)
table(sample(shot_outcomes, size=100, replace=TRUE))
?sample
sim_basket <- sample(shot_outcomes, size = 1, replace = TRUE, prob = c(0.45, 0.55))
sim_basket <- sample(shot_outcomes, size = 133, replace = TRUE, prob = c(0.45, 0.55))
sim_streak <- calc_streak(sim_basket)
View(sim_streak)
View(sim_streak)
ggplot(data = sim_streak, aes(x = length)) +
geom_histogram(binwidth = 1)
median(sim_streak)
median(sim_streak$length)
IQR(sim_streak$length)
View(kobe_streak)
library(statsr)
calc_streak
98/2
98.0/2
qnorm(0.049)
quit()
qnorm(0.049)
qnorm(0.01)
quit()
library(statsr)
library(dplyr)
library(ggplot2)
data(nc)
str(nc)
View(nc)
hist(nc$fage)
ggplot(nc, aes(x = c(fage, mage))) +
geom_boxplot()
ggplot(nc, aes(x = fage) + geom_boxplot()
)
ggplot(nc, aes(x = fage)) + geom_boxplot()
nc %>%
filter(!is.na(fage)) %>%
ggplot(nc, aes(fage)) +
geom_boxplot()
nc %>%
filter(!is.na(fage)) %>%
ggplot(nc, aes(x = fage)) +
geom_boxplot()
test <- nc %>%
filter(!is.na(fage))
ggplot(test, aes(x = fage)) +
geom_boxplot()
summary(nc$gained)
?n
nc %>%
filter(is.na(gained)) %>%
summarise(count = n())
nc[is.na(gained)]
nc[is.na(nc$gained)]
nc[nc == is.na(gained)]
nc[nc == is.na(nc$gained)]
summary(nc$gained)
ggplot(nc, aes(x = !is.na(gained))) +
geom_boxplot()
ggplot(nc, aes(x = gained)) +
geom_boxplot()
ggplot(nc, aes(x = gained)) +
geom_histogram()
ggplot(nc, aes(x = c(habit, weight))) +
geom_boxplot()
ggplot(nc, aes(x = habit, weight)) +
geom_boxplot()
nc %>%
group_by(habit) %>%
summarise(mean_weight = mean(weight))
nc %>%
group_by(habit) %>%
summarise(group_size = n())
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci", method = "theoretical")
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker","nonsmoker"))
?inference
method = "theoretical", order = c("smoker","nonsmoker"), conf_level = 0.95)
inference(y = weight, x = habit, data = nc, statistic = "mean", type = "ci",
method = "theoretical", order = c("smoker","nonsmoker"), conf_level = 0.95)
inference(y = weeks, data = nc, statistic = "mean", type = "ci", method = "theoretical", conf_level = 0.99)
inference(y = weeks, data = nc, statistic = "mean", type = "ci", method = "theoretical", conf_level = 0.90)
inference(y = weight, x = mature, data = nc, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
View(nc)
inference(y = gained, x = mature, data = nc, statistic = "mean", type = "ht", null = 0,
alternative = "twosided", method = "theoretical")
levels(nc$mature)
str(nc$mature)
nc %>%
group_by(mature) %>%
summarise(max_age = max(mage), min_age = min(mage))
add2 <- function(x, y) {
x + y
}
add2(2, 3)
bigger10 <- function(x) {
x[x >10]
}
bigger(test)
test <- c(5, 10, 15, 20)
bigger10(test)
bigger10 <- function(a, b) {
a[a > b]
}
bigger10(test, 5)
bigger <- function(x, n) {
# Returns a subset of the vector x whose elements are greater than n
x[x > n]
}
bigger10 <- function(x) {
# Returns a subset of the vector x whose elements are greater than 10
x[x > 10]
}
add2 <- function(x, y) {
# Returns sum of x and y
x + y
}
bigger <- function(x, n = 10) {
# Returns a subset of the vector x whose elements are greater than n (defaults to 10)
x[x > n]
}
x <- 1:20
bigger(x)
bigger(x, 15)
eachMean <- function(x) {
# Calculates the mean of each column of x
for(i in seq_along(x)) {
mean(x[,i])
}
}
mat <- matrix(1:6, 2, 3)
mat
eachMean(mat)
eachMean <- function(x) {
# Calculates the mean of each column of x
for(i in seq_len(ncol(x))) {
mean(x[,i])
}
}
eachMean(mat)
eachMean(mat)
eachMean <- function(x) {
# Calculates the mean of each column of x
for(i in seq_len(ncol(x))) {
mean(x[,i])
}
}
eachMean(mat)
eachMean <- function(x) {
# Calculates the mean of each column of x
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i])
}
}
mat
eachMean(mat)
eachMean <- function(x) {
# Calculates the mean of each column of x
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i])
}
means
}
eachMean(mat)
eachMean <- function(x, removeNA = TRUE) {
# Calculates the mean of each column of x
nc <- ncol(x)
means <- numeric(nc)
for(i in 1:nc) {
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
eachMean(airquality)
eachMean(airquality, removeNA = FALSE)
oldOne <- function(x) {
for(i in seq_along(ncol(x))) {
print(mean(x[, i]))
}
}
oldOne(mat)
oldOne <- function(x) {
for(i in seq_len(ncol(x))) {
print(mean(x[, i]))
}
}
oldOne(mat)
formals(bigger)
library(ggplot2)
library(dplyr)
library(corrplot)
library(caret)
n <- length(bank$age) * .30
?read.csv
planes <- read.csv("~/Documents/2000.csv", nrows = 10)
View(planes)
planes <- read.csv("~/Documents/2000.csv", nrows = 5000)
View(planes)
str(planes$UniqueCarrier)
levels(planes$UniqueCarrier)
install.packages("RHive")
library.packages("RJVC")
installed.packages("RJVC")
install.packages("RJVC")
install.packages("RJDBC")
library(RJDBC)
library(rJava)
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "/opt/mapr/hive/hive-0.13/lib/hive-jdbc-0.13.0-mapr-1410.jar")
cp = c("/usr/lib/hive/lib/hive-jdbc.jar", "/usr/lib/hadoop/client/hadoop-common.jar", "/usr/lib/hive/lib/libthrift-0.9.2.jar", "/usr/lib/hive/lib/hive-service.jar", "/usr/lib/hive/lib/httpclient-4.2.5.jar", "/usr/lib/hive/lib/httpcore-4.2.5.jar", "/usr/lib/hive/lib/hive-jdbc-standalone.jar")
.jinit(classpath=cp)
drv <- JDBC("org.apache.hive.jdbc.HiveDriver", "/usr/lib/hive/lib/hive-jdbc.jar", identifier.quote="`")
"/usr/hdp/current/hadoop-client/hadoop-common.jar")
cp = c("/usr/hdp/current/hive-client/lib/hive-jdbc.jar",
"/usr/hdp/current/hadoop-client/hadoop-common.jar")
.jinit(classpath=cp)
drv <- JDBC("org.apache.hive.jdbc.HiveDriver",
"/usr/hdp/current/hive-client/lib/hive-jdbc.jar",
identifier.quote="`")
?JDBC
hadoop.class.path = list.files(path=c("/usr/hdp/current/hadoop"),pattern="jar", full.names=T);
hive.class.path = list.files(path=c("/usr/hdp/current/hive-client/lib"),pattern="jar", full.names=T);
hadoop.lib.path = list.files(path=c("/usr/hdp/current/hive-client/lib"),pattern="jar",full.names=T);
mapred.class.path = list.files(path=c("/usr/hdp/current/hadoop-mapreduce-client/lib"),pattern="jar",full.names=T);
cp = c(hive.class.path,hadoop.lib.path,mapred.class.path,hadoop.class.path)
.jinit(classpath=cp,parameters="-Djavax.security.auth.useSubjectCredsOnly=false")
drv <- JDBC("org.apache.hive.jdbc.HiveDriver","hive-jdbc.jar",identifier.quote="`")
library(DBI)
library(rJava)
library(RJDBC)
hadoop.class.path = list.files(path=c("/usr/hdp/current/hadoop"),pattern="jar", full.names=T);
hive.class.path = list.files(path=c("/usr/hdp/current/hive-client/lib"),pattern="jar", full.names=T);
hadoop.lib.path = list.files(path=c("/usr/hdp/current/hive-client/lib"),pattern="jar",full.names=T);
mapred.class.path = list.files(path=c("/usr/hdp/current/hadoop-mapreduce-client/lib"),pattern="jar",full.names=T);
cp = c(hive.class.path,hadoop.lib.path,mapred.class.path,hadoop.class.path)
.jinit(classpath=cp,parameters="-Djavax.security.auth.useSubjectCredsOnly=false")
drv <- JDBC("org.apache.hive.jdbc.HiveDriver","hive-jdbc.jar",identifier.quote="`")
drv <- JDBC("org.apache.hadoop.hive.jdbc.HiveDriver")
library(dplyr)
chicago <- readRDS("chicago.rds")
library(datasets)
data("cars")
with(cars, plot(speed, dist))
?par
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
?with
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality, xlab = "Month", ylab = "Ozone (ppb")
?par
par('lty')
par("col")
par("pch")
par("bg")
par("mar")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone y Wind en NYC")
with(airquality, plot(Wind, Ozone, main = "Ozone y Wind en NYC"))
with(subset(airquality, Month = 5), points(Wind, Ozone, col = "blue"))
load("airquality")
data(airquality)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone y Wind en NYC")
with(airquality, plot(Wind, Ozone, main = "Ozone y Wind en NYC"))
with(subset(airquality, Month = 5), points(Wind, Ozone, col = "blue"))
View(airquality)
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
data(airquality)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone y Wind en NYC")
with(airquality, plot(Wind, Ozone, main = "Ozone y Wind en NYC"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(airquality, plot(Wind, Ozone, main = "Ozone y Wind en NYC", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("Mayo", "Otros meses"))
with(airquality, plot(Wind, Ozone, main = "Ozone y Wind en NYC", pch = 20))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwed = 2)
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
with(airquality, {
plot(Wind, Ozone, main = "Ozone y Wind")
plot(Solar.R, Ozone, main = "Ozone y Solar Radiation")
})
par(mfrow = c(1, 3), mar = c(4, 4, 2, 1), oma = c(0, 0, 2, 0))
with(airquality, {
plot(Wind, Ozone, main = "Ozone y Wind")
plot(Solar.R, Ozone, main = "Ozone y Solar Radiation")
plot(Temp, Ozone, main = "Ozone y temperatura")
mtext("Ozone y Weather en NYC", outer = TRUE)
})
with(airquality, plot(Wind, Ozone, main = "Ozone y Wind en NYC", type = "n"))
with(subset(airquality, Month == 5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue", "red"), legend = c("Mayo", "Otros meses"))
library(dplyr)
library(nycflights13)
install.packages("nycflights13")
library(nycflights13)
plot(cars)
?nycflights13
str(flights)
table(flights$origin)
table(flights$dest)
str(flights)
flights %>% filter(origin == "JFK" & dest == 'OAK')
list.files()
setwd("~/Documents/UW_machine_learning/foundations/week2/")
list.files()
head(homes)
homes <- read.csv("home_data.csv")
head(homes)
homes[homes[my_features]]
my_features <- ["bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "zipcode"]
homes[homes[my_features]]
homes[homes[my_features]]
my_features <- c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "zipcode")
homes[homes[my_features]]
library(dplyr)
head(homes)
?filter
?select
my_model <- homes %>% select(my_features)
my_features <- c("bedrooms", "bathrooms", "sqft_living", "sqft_lot", "floors", "zipcode")
my_model <- homes %>% select(my_features)
